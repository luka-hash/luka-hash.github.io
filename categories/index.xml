<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Categories on Luka&#39;s Attic</title>
    <link>http://luka.ljudi.org/categories/</link>
    <description>Recent content in Categories on Luka&#39;s Attic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="http://luka.ljudi.org/categories/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Using Local Packages in Golang</title>
      <link>http://luka.ljudi.org/posts/using-local-packages-in-golang/</link>
      <pubDate>Wed, 23 Aug 2023 13:41:32 +0200</pubDate>
      
      <guid>http://luka.ljudi.org/posts/using-local-packages-in-golang/</guid>
      <description>&lt;p&gt;Sometimes, whilst developing Go libraries, I want to test stuff, but not the correctness; no, I want to test the interface (not related to Go&amp;rsquo;s interfaces). What does it mean? It means that I want to play with the library to see how it feels to use it.&lt;/p&gt;
&lt;p&gt;And since Go has a specific way of handling dependencies, it might not be obvious how to use library B inside the program (or another library, even) A without uploading the code on the network. At least it wasn&amp;rsquo;t obvious to me.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m pretty sure there is a guide somewhere on the Go&amp;rsquo;s official documentation page, but still&amp;hellip; more the merrier.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;actual-guide&#34;&gt;Actual guide&lt;/h3&gt;
&lt;p&gt;Imagine our library is called B. We create a directory and initialize the Go module inside of it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd &lt;span style=&#34;color:#75715e&#34;&gt;# just to go to $HOME :)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir demo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir B &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go mod init B
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we can write a library logic in side of a &lt;code&gt;main.go&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hi &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t forget to capitalize functions and variables you want to export :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, we can create a module in which we are going to do the tests and experiments.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd &lt;span style=&#34;color:#75715e&#34;&gt;# just to go to $HOME&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir A &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go mod init A
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And after we write our code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lib&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Greet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dante&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is only one thing left to do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go mod edit -replace B&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/luka/demo/B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go mod tidy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go run main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;conclusions-and-closing-notes&#34;&gt;Conclusions and closing notes&lt;/h3&gt;
&lt;p&gt;It wasn&amp;rsquo;t that hard? There is definitely some getting used to, but it&amp;rsquo;s manageable.&lt;/p&gt;
&lt;p&gt;As per usual, if you find any errors, send me a mail at luka [at] ljudi [dot] org. Cheers!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Tar for Humans</title>
      <link>http://luka.ljudi.org/posts/tar-for-humans/</link>
      <pubDate>Tue, 22 Aug 2023 23:55:30 +0200</pubDate>
      
      <guid>http://luka.ljudi.org/posts/tar-for-humans/</guid>
      <description>&lt;p&gt;&lt;code&gt;tar&lt;/code&gt; is a command used to convert a file or a group of files into an archive. It can also do other stuff with those archives, like listing the files inside the archive, extracting files, etc.&lt;/p&gt;
&lt;p&gt;To put it simply, at some point in your life as a linux/unix user/developer, you will need to use &lt;code&gt;tar&lt;/code&gt;,  either to compress some files and send them to someone or to extract the files someone sent to you.&lt;/p&gt;
&lt;p&gt;My plan for this guide is not only to give you the commands you need to use, but to actually explain those commands, so you don&amp;rsquo;t have to reread this (or any other) guide again. With that in mind, we will be using GNU-style options, or long-form options. Why? Is it obvious what this option does?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All user commands are prepended with &amp;lsquo;$&amp;rsquo; and all sudo commands are prepended with &amp;lsquo;#&amp;rsquo;. Commands that start with &amp;lsquo;$ #&amp;rsquo; are still user commands, but they are comments, they are not to be pasted&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar -tavf example.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No? That is why. :)&lt;/p&gt;
&lt;h2 id=&#34;using-tar&#34;&gt;Using tar&lt;/h2&gt;
&lt;p&gt;For the purposes of this guide, I created a &lt;code&gt;demo&lt;/code&gt; directory (in my $HOME) and copied the content of the go-build directory into it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cp -r .cache/go-build/* demo/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd demo/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -l
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and this is the output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -l
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; luka luka   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; 09:39 &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; luka luka   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; 09:39 &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; luka luka   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; 09:39 &lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; luka luka   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; 09:39 &lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; luka luka   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; 09:39 &lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; luka luka   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; 09:39 &lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; luka luka   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; 09:39 &lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; luka luka   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; 09:39 &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; luka luka   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Aug &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; 09:39 &lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Actual otput is bigger, I only copied the first 10 lines of it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now to create an archive containing all those files, we can run this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar --create --verbose --auto-compress --file go-build.tar.gz ./*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create an archive (&lt;code&gt;--create&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;print a list of files that are being archived (&lt;code&gt;--verbose&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;determine the compression method (program) based on the archive name extension (&lt;code&gt;--auto-compress&lt;/code&gt;), in this case, it would be &lt;code&gt;gzip&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;name an archive &lt;code&gt;go-build.tar.gz&lt;/code&gt; (&lt;code&gt;--file &amp;lt;name&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;put all the files from the current directory in the archive (&lt;code&gt;./*&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that you have an archive, you can do anything with it, like - list the content of the archive:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar --list --verbose --file go-build.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar --list --file go-build.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using &lt;code&gt;--verbose&lt;/code&gt; options will report file permissions and ownership alongside of file names.
Now that you have &lt;em&gt;verified&lt;/em&gt; (in a way, at least) that all your files are archived, you should probably generate a &lt;em&gt;sum&lt;/em&gt; of that file, so you can later verify that it is indeed that file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sha256sum go-build.tar.gz &amp;gt; go-build.tar.gz.sha256
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# and later you can check the integrity like so:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sha256sum --check go-build.tar.gz.sha256
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# it should print `go-build.tar.gz: OK`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And finally, when you decide to extract files from the archive, you can use this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar --extract --verbose --auto-compress --file go-build.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# this will extract the archive in the current working directory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# in the case you want to extract it in another directory, you can do it like so:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir go-build &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar --extract --verbose --auto-compress --directory go-build/ --file go-build.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s about it. Now you know how to use &lt;code&gt;tar&lt;/code&gt; to handle all (or at least 99%) of your day-to-day tasks. Of course, there are other options (many such options), some of them including (but not limited to):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--append&lt;/code&gt; : this adds a file to the existing archive (but the archive can not be compressed); e.g. &lt;code&gt;tar --append --file archive.tar file1 file2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--delete&lt;/code&gt; : this removes a file from the existing archive (again, the archive can not be compressed); e.g. &lt;code&gt;tar --delete --file archive.tar &#39;file1&#39; &#39;file2&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--wildcards&lt;/code&gt; : this enables wildcard usage when extracting files from the archive; e.g.  &lt;code&gt;tar --extract --file archive.tar.gz &#39;*.c&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--remove-files&lt;/code&gt; : this removes the archived files; e.g. &lt;code&gt;tar --create --verbose --auto-comress --remove-files --file home.tar.gz /home/user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--keep-old-files&lt;/code&gt; : this tells &lt;code&gt;tar&lt;/code&gt; to treat situations where it tries to extract a file X into a directory where another file named X already exists as error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--skip-old-files&lt;/code&gt; : this tells &lt;code&gt;tar&lt;/code&gt; to treat situations where it tries to extract a file X into a directory where another file named X already exists as non-errors, but to skip them silently&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You also have the option to: update files, diff the archive and the filesystem, concatenate tar files to an archive, exclude specific files by name or pattern (or even from .gitignore and other vcs tools), follow hard and soft links and archive the files they point/refer to, extract files to stdout, etc.&lt;/p&gt;
&lt;h3 id=&#34;closing-notes&#34;&gt;Closing notes&lt;/h3&gt;
&lt;p&gt;This is it for today. I hope you find this guide useful. As per usual, if you find any errors, send me a mail at &lt;code&gt;luka [at] ljudi [dot] org&lt;/code&gt;. Cheers!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Super Basic Git Starter</title>
      <link>http://luka.ljudi.org/posts/super-basic-git-starter/</link>
      <pubDate>Mon, 21 Aug 2023 22:33:12 +0200</pubDate>
      
      <guid>http://luka.ljudi.org/posts/super-basic-git-starter/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This page is a WIP. I plan on updating it time-to-time.
You noticed a mistake? Send me a mail at &lt;code&gt;luka [at] ljudi [dot] org&lt;/code&gt;. Cheers!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;what-is-git&#34;&gt;What is git?&lt;/h1&gt;
&lt;p&gt;Git is a FOSS distributed version control system.&lt;/p&gt;
&lt;p&gt;Or, to put it simply, a tool to keep a track of changes on your projects (mostly programming projects, but git works on non-text files too).&lt;/p&gt;
&lt;h2 id=&#34;show-me&#34;&gt;Show me&lt;/h2&gt;
&lt;p&gt;First - install &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt;. On Arch (if you use &lt;code&gt;paru&lt;/code&gt;), you can just run &lt;code&gt;paru -S git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then create a directory for your project and initialize the git repository inside of it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;torvalds@linux-foundation.org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Linus Torvalds&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An alternative would be to clone a repository from a remote device (github for example); in that case you would use &lt;code&gt;git clone &amp;lt;url&amp;gt;&lt;/code&gt; instead of creating a directory and running &lt;code&gt;git init&lt;/code&gt; inside of it.&lt;/p&gt;
&lt;p&gt;This sets up a git repository in your project directory. Now you can start creating files, editing them, and so on.&lt;/p&gt;
&lt;p&gt;Then you can create a repository on some git forge, like &lt;a href=&#34;github.com&#34;&gt;github&lt;/a&gt; or &lt;a href=&#34;codeberg.org&#34;&gt;codeberg&lt;/a&gt;. When you do that, you will get an url that will point to that repository. Now you need to set the remote url of your local project to that remote repository.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You don&amp;rsquo;t need to do this if you cloned a directory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git remote add origin &amp;lt;url&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, after you stage and commit your changes, you can push them to the remote repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s about it, at least for the start.&lt;/p&gt;
&lt;h2 id=&#34;stage-commit&#34;&gt;Stage!? Commit?!&lt;/h2&gt;
&lt;p&gt;If you are confused by some terms I mentioned, let me try to explain some things.&lt;/p&gt;
&lt;p&gt;At every moment, there are 3 &amp;rsquo;trees&amp;rsquo; in your git project:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;working directory : holds actual files&lt;/li&gt;
&lt;li&gt;index (stage) : staging area (tree with changes)&lt;/li&gt;
&lt;li&gt;HEAD : points to the last commit&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# adds all files from the $(pwd) to the staging area&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add &amp;lt;filename&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# adds only a specific file to the staging area&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# creates a &amp;#39;snapshot&amp;#39; of the project&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And as for &lt;code&gt;git push&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;origin&lt;/code&gt; is a remote location (you can have multiple of these), and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; is a branch (you can also have multiple of these)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-about-configuration&#34;&gt;What about configuration?&lt;/h2&gt;
&lt;p&gt;I prefer adding a name and email separately for each project (io. not having a global email and name), so I can handle multiple accounts more easily.&lt;/p&gt;
&lt;p&gt;And this is my tiny git config (stored in &amp;ldquo;$XDG_CONFIG_HOME/git/config&amp;rdquo;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;core&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    editor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nvim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;init&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    defaultBranch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;color&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;closing-notes&#34;&gt;Closing notes&lt;/h3&gt;
&lt;p&gt;If you are reading this, it means that the article is not fully done. The following is a list of topics that I plan to cover in the foreseeable future.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; install and init a repo&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; branches&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; config&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; diff-ing&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; merging&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; collaborating efficiently&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stay tuned! Cheers!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>New Beginnings</title>
      <link>http://luka.ljudi.org/posts/new-beginnings/</link>
      <pubDate>Mon, 21 Aug 2023 18:13:25 +0200</pubDate>
      
      <guid>http://luka.ljudi.org/posts/new-beginnings/</guid>
      <description>&lt;h1 id=&#34;welcome&#34;&gt;Welcome&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve been planning to make a  blog for a while now - so I just decided to stop procrastinating and do it. So&amp;hellip; Welcome!&lt;/p&gt;
&lt;h2 id=&#34;what-to-expect&#34;&gt;What to expect?&lt;/h2&gt;
&lt;p&gt;Ramblings of a random internet person, I guess. The main intention of this blog is to have a place to share my ramblings on technology. But I can not promise there won&amp;rsquo;t be some random posts here and there.&lt;/p&gt;
&lt;h2 id=&#34;who-am-i&#34;&gt;Who am I?&lt;/h2&gt;
&lt;p&gt;Well&amp;hellip; I&amp;rsquo;m Luka.&lt;/p&gt;
&lt;p&gt;Right now, I&amp;rsquo;m studying mathematics, but technology in general is what I&amp;rsquo;ve been doing my whole life. I&amp;rsquo;m a generalist - I like doing systems programming as well as web development. But I also like doing non-tech things.&lt;/p&gt;
&lt;p&gt;It is kind of hard for me to give you a few-sentence summary of myself, so I&amp;rsquo;ll just stop here and leave you to roam this blog and find out for yourself.&lt;/p&gt;
&lt;p&gt;In case you want to contact me, you can send me a mail at &lt;code&gt;luka [at] ljudi [dot] org&lt;/code&gt;. You can also see some of the things I&amp;rsquo;m working on &lt;a href=&#34;github.com/luka-hash&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    
    
    
  </channel>
</rss>
